{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Software development world of egg laying creatures known as \"eierlegendewollmilchsau\" (German for Egg-laying woolly milk pig ) . Have you ever asked your self if we change the climate by asking online services for the weather ? Currently under development About: Project Author: Groupeffect Source code on GitHub.com Name Inspiration from Monotreme ?","title":"Welcome"},{"location":"#welcome","text":"to the Software development world of egg laying creatures known as \"eierlegendewollmilchsau\" (German for Egg-laying woolly milk pig ) . Have you ever asked your self if we change the climate by asking online services for the weather ?","title":"Welcome"},{"location":"#currently-under-development","text":"About: Project Author: Groupeffect Source code on GitHub.com Name Inspiration from Monotreme ?","title":"Currently under development"},{"location":"documentation/admins/","text":"","title":"Admins"},{"location":"documentation/developers/","text":"","title":"Developers"},{"location":"documentation/users/","text":"","title":"Users"},{"location":"project/","text":"Description Motivation Free your self from paid services and use your own resources to develope or serve self hosted services. You can setup on VM's or local computer or change your cloud provider with low effort. When I start a development process I always think about longterm decisions that add values like: technical documentation reduce costs save time increase robustness increase resiliance of the whole project cross platform compatibility easy configuration (white labeling) And I wonder what are the most valuble online / offline services for my team and me? The most important compartments are: Git platform (VCS) code repositories Networking (VPN, DNS, Intranet, etc.) Operating Systems (Linux,Windows,Mac,Android,etc.) Container Platforms (Docker, Kubernetes, Proxmox etc.) Container registry (e.g. DockerHub) Package Manager & Source Code Registries (apt,apk,pipy,nodejs,yarn) Communication and Collaboration Services (E-Mail, Messanger, Notifier, O-Auth, Gitlab, Bitbucket,S3, etc.) Virtual Machine Images (e.g. Ubuntu, Fedora, Arch, Alpine etc. ) Servers (any, general purpose, runner and so on) Databases (e.g. Backend connection, API etc.) Frameworks & Coding Languages (kubernetes,python,helm,nodejs,django etc.) Problems As a software developer it is hard not to work with cloud services like AWS, Azure, GCP or other \"Big Players\". Cloud providers are the new \"Gate Keepers\" and they make the rules, prices and standards. Centralized Datacenters all over the world closed source code and data cooperation and interaction of stakeholders Purpose Local development with minimal or no integration of paid services. Freedom of choice to switch anytime to paid services. Scope For developers, system architects, entrepreneurs, companies, organizations and every one who wants to self host the most important software compartments. Stakeholders government society companies, organizations developers Developer Background The need to have full controll over the software project I do not want to feed the \"Big Players\" I want to democratise software development I need local setups to work offline Similar Projects You can use these technologies to achieve the same result but different scopes and compartments. For instance some use VM's others use containerd. But each needs its own workflow and has individual boundries. LocalStack Coolify Podman Desktop Proxmox Use Cases testing environment lan party small business with self hosted servers Web Campains for NGO's and Governmental Oragnizations","title":"Description"},{"location":"project/#description","text":"","title":"Description"},{"location":"project/#motivation","text":"Free your self from paid services and use your own resources to develope or serve self hosted services. You can setup on VM's or local computer or change your cloud provider with low effort. When I start a development process I always think about longterm decisions that add values like: technical documentation reduce costs save time increase robustness increase resiliance of the whole project cross platform compatibility easy configuration (white labeling) And I wonder what are the most valuble online / offline services for my team and me? The most important compartments are: Git platform (VCS) code repositories Networking (VPN, DNS, Intranet, etc.) Operating Systems (Linux,Windows,Mac,Android,etc.) Container Platforms (Docker, Kubernetes, Proxmox etc.) Container registry (e.g. DockerHub) Package Manager & Source Code Registries (apt,apk,pipy,nodejs,yarn) Communication and Collaboration Services (E-Mail, Messanger, Notifier, O-Auth, Gitlab, Bitbucket,S3, etc.) Virtual Machine Images (e.g. Ubuntu, Fedora, Arch, Alpine etc. ) Servers (any, general purpose, runner and so on) Databases (e.g. Backend connection, API etc.) Frameworks & Coding Languages (kubernetes,python,helm,nodejs,django etc.)","title":"Motivation"},{"location":"project/#problems","text":"As a software developer it is hard not to work with cloud services like AWS, Azure, GCP or other \"Big Players\". Cloud providers are the new \"Gate Keepers\" and they make the rules, prices and standards. Centralized Datacenters all over the world closed source code and data cooperation and interaction of stakeholders","title":"Problems"},{"location":"project/#purpose","text":"Local development with minimal or no integration of paid services. Freedom of choice to switch anytime to paid services.","title":"Purpose"},{"location":"project/#scope","text":"For developers, system architects, entrepreneurs, companies, organizations and every one who wants to self host the most important software compartments.","title":"Scope"},{"location":"project/#stakeholders","text":"government society companies, organizations developers","title":"Stakeholders"},{"location":"project/#developer-background","text":"The need to have full controll over the software project I do not want to feed the \"Big Players\" I want to democratise software development I need local setups to work offline","title":"Developer Background"},{"location":"project/#similar-projects","text":"You can use these technologies to achieve the same result but different scopes and compartments. For instance some use VM's others use containerd. But each needs its own workflow and has individual boundries. LocalStack Coolify Podman Desktop Proxmox","title":"Similar Projects"},{"location":"project/#use-cases","text":"testing environment lan party small business with self hosted servers Web Campains for NGO's and Governmental Oragnizations","title":"Use Cases"},{"location":"specification/introduction/","text":"Specification System capabilities: Offline or Online infrastructure (production ready) Network of single and multi server setup UI's for admins, tenants and endusers Development tools CI/CD-Pipelines Test environments | domain specific Version source control Containers & images Production builds Security tests & administration Notebooks Automated documentation LLM integration via MCP & API Education in Fullstack solutions","title":"Specification"},{"location":"specification/introduction/#specification","text":"System capabilities: Offline or Online infrastructure (production ready) Network of single and multi server setup UI's for admins, tenants and endusers Development tools CI/CD-Pipelines Test environments | domain specific Version source control Containers & images Production builds Security tests & administration Notebooks Automated documentation LLM integration via MCP & API Education in Fullstack solutions","title":"Specification"},{"location":"specification/requirements/","text":"Dependencies required: ubuntu-os | 24.04, server, dektop cluster-k8s | k3s, microk8s terminal | git optional: terminal | k9s, tmux, podman, podman-desktop code editor | vscode, neovim llm | ollama, api servers | virtual machine, online, nodes, cluster, runner Description Core software components: Kubernetes Argocd ( GitOps ) Gitea ( and runners ) Container image registry Postgresql Model Context Protocol (for each service with an API) Swagger REST Apis (for each service) Services backend | rest, async, database, external services frontend | pwa chat | llm, messanger, contact mcp servers | servies deployments | dev, test, prod","title":"Dependencies"},{"location":"specification/requirements/#dependencies","text":"required: ubuntu-os | 24.04, server, dektop cluster-k8s | k3s, microk8s terminal | git optional: terminal | k9s, tmux, podman, podman-desktop code editor | vscode, neovim llm | ollama, api servers | virtual machine, online, nodes, cluster, runner","title":"Dependencies"},{"location":"specification/requirements/#description","text":"Core software components: Kubernetes Argocd ( GitOps ) Gitea ( and runners ) Container image registry Postgresql Model Context Protocol (for each service with an API) Swagger REST Apis (for each service) Services backend | rest, async, database, external services frontend | pwa chat | llm, messanger, contact mcp servers | servies deployments | dev, test, prod","title":"Description"},{"location":"stack/","text":"Overview Architecture Data structure Design Minimum setup","title":"Overview"},{"location":"stack/#overview","text":"","title":"Overview"},{"location":"stack/#architecture","text":"","title":"Architecture"},{"location":"stack/#data-structure","text":"","title":"Data structure"},{"location":"stack/#design","text":"","title":"Design"},{"location":"stack/#minimum-setup","text":"","title":"Minimum setup"},{"location":"stack/cluster/","text":"","title":"Cluster"},{"location":"stack/controller/","text":"test test test test test test test test","title":"Controller"},{"location":"stack/controller/#test","text":"","title":"test"},{"location":"stack/controller/#test_1","text":"","title":"test"},{"location":"stack/controller/#test_2","text":"","title":"test"},{"location":"stack/controller/#test_3","text":"","title":"test"},{"location":"stack/controller/#test_4","text":"","title":"test"},{"location":"stack/controller/#test_5","text":"","title":"test"},{"location":"stack/controller/#test_6","text":"","title":"test"},{"location":"stack/controller/#test_7","text":"","title":"test"},{"location":"stack/database/","text":"","title":"Database"},{"location":"stack/git/","text":"","title":"Git"},{"location":"stack/os/","text":"","title":"Os"}]}